@model AdminMenuItemsViewModel
@{
	ViewData["Title"] = "Manage Menu Items";
	Layout = "_AdminLayout";
}

<div class="container-fluid">
	<div class="d-flex justify-content-between align-items-center mb-4">
		<div>
			<h1 class="h3 mb-0">Menu Items</h1>
			@if (Model.FoodCourt != null)
			{
				<p class="text-muted mb-0">@Model.FoodCourt.Name</p>
			}
		</div>
		<button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addMenuItemModal">
			<i class="bi bi-plus-lg"></i> Add Menu Item
		</button>
	</div>

	<!-- Category Filter -->
	<div class="mb-4">
		<div class="btn-group">
			<button type="button" class="btn @(string.IsNullOrEmpty(ViewBag.Category) ? "btn-primary" : "btn-outline-primary")"
					onclick="filterByCategory('')">
				All
			</button>
			@foreach (var category in Model.Categories)
			{
				<button type="button"
						class="btn @(ViewBag.Category == category ? "btn-primary" : "btn-outline-primary")"
						onclick="filterByCategory('@category')">
					@category
				</button>
			}
		</div>
	</div>

	<div class="row">
		@foreach (var item in Model.MenuItems)
		{
			<div class="col-md-6 col-lg-4 mb-4">
				<div class="card shadow-sm h-100">
					@if (!string.IsNullOrEmpty(item.ImageUrl))
					{
						<img src="@item.ImageUrl" class="card-img-top" style="height: 200px; object-fit: cover;" alt="@item.Name">
					}
					<div class="card-body">
						<div class="d-flex justify-content-between align-items-start mb-2">
							<h5 class="card-title mb-0">
								@item.Name
								@if (item.IsVeg)
								{
									<i class="bi bi-circle-fill text-success ms-1" style="font-size: 0.75rem;"></i>
								}
								else
								{
									<i class="bi bi-circle-fill text-danger ms-1" style="font-size: 0.75rem;"></i>
								}
							</h5>
							<div class="form-check form-switch">
								<input class="form-check-input" type="checkbox"
								@(item.IsAvailable ? "checked" : "")
									   onchange="toggleMenuItemAvailability(@item.Id, this.checked)">
							</div>
						</div>
						<p class="text-muted small mb-2">@item.Description</p>
						<div class="mb-2">
							<span class="badge bg-secondary">@item.Category</span>
						</div>
						<div class="text-warning mb-3">
							@for (int i = 1; i <= 5; i++)
							{
								<i class="bi @(i <= Math.Round(item.Rating) ? "bi-star-fill" : "bi-star")"></i>
							}
							<small class="text-muted ms-1">(@item.ReviewCount reviews)</small>
						</div>
						<div class="row g-2 mb-3">
							<div class="col">
								<div class="border rounded p-2 text-center">
									<small class="d-block text-muted">Price</small>
									<strong>₹@item.Price.ToString("N2")</strong>
								</div>
							</div>
							<div class="col">
								<div class="border rounded p-2 text-center">
									<small class="d-block text-muted">Orders</small>
									<strong>@item.OrderCount</strong>
								</div>
							</div>
						</div>
						<div class="d-flex gap-2">
							<button class="btn btn-outline-primary flex-grow-1"
									onclick="editMenuItem(@item.Id)">
								<i class="bi bi-pencil"></i> Edit
							</button>
							<button class="btn btn-outline-danger flex-grow-1"
									onclick="deleteMenuItem(@item.Id)">
								<i class="bi bi-trash"></i> Delete
							</button>
						</div>
					</div>
				</div>
			</div>
		}
	</div>
</div>

<!-- Add Menu Item Modal -->
<div class="modal fade" id="addMenuItemModal" tabindex="-1">
	<div class="modal-dialog modal-lg">
		<div class="modal-content">
			<form id="addMenuItemForm" enctype="multipart/form-data">
				<div class="modal-header">
					<h5 class="modal-title">Add Menu Item</h5>
					<button type="button" class="btn-close" data-bs-dismiss="modal"></button>
				</div>
				<div class="modal-body">
					<div class="row mb-3">
						<div class="col-md-8">
							<label class="form-label">Name</label>
							<input type="text" class="form-control" name="name" required>
						</div>
						<div class="col-md-4">
							<label class="form-label">Price (₹)</label>
							<input type="number" class="form-control" name="price" step="0.01" required>
						</div>
					</div>

					<div class="mb-3">
						<label class="form-label">Description</label>
						<textarea class="form-control" name="description" rows="3"></textarea>
					</div>

					<div class="row mb-3">
						<div class="col-md-6">
							<label class="form-label">Category</label>
							<select class="form-select" name="category" required>
								@foreach (var category in Model.Categories)
								{
									<option value="@category">@category</option>
								}
								<option value="other">Add New Category</option>
							</select>
						</div>
						<div class="col-md-6" id="newCategoryGroup" style="display: none;">
							<label class="form-label">New Category</label>
							<input type="text" class="form-control" name="newCategory">
						</div>
					</div>

					<div class="mb-3">
						<label class="form-label">Image</label>
						<input type="file" class="form-control" name="image" accept="image/*">
					</div>

					<div class="row">
						<div class="col-md-6">
							<div class="form-check">
								<input class="form-check-input" type="checkbox" name="isVeg" id="isVeg">
								<label class="form-check-label" for="isVeg">Vegetarian</label>
							</div>
						</div>
						<div class="col-md-6">
							<div class="form-check">
								<input class="form-check-input" type="checkbox" name="isAvailable" id="isAvailable" checked>
								<label class="form-check-label" for="isAvailable">Available</label>
							</div>
						</div>
					</div>
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
					<button type="submit" class="btn btn-primary">Add Item</button>
				</div>
			</form>
		</div>
	</div>
</div>

@section Scripts {
	<script>
		// Handle category selection
		$('select[name="category"]').change(function() {
			const showNewCategory = $(this).val() === 'other';
			$('#newCategoryGroup').toggle(showNewCategory);
			$('input[name="newCategory"]').prop('required', showNewCategory);
		});

		// Handle menu item form submission
		$('#addMenuItemForm').on('submit', function(e) {
			e.preventDefault();
			const formData = new FormData(this);

			$.ajax({
				url: '@Url.Action("AddMenuItem")',
				type: 'POST',
				data: formData,
				processData: false,
				contentType: false,
				success: function(response) {
					if (response.success) {
						location.reload();
					} else {
						showAlert(response.message, 'danger');
					}
				},
				error: function() {
					showAlert('Failed to add menu item', 'danger');
				}
			});
		});

		// Filter by category
		function filterByCategory(category) {
			const url = new URL(window.location);
			if (category) {
				url.searchParams.set('category', category);
			} else {
				url.searchParams.delete('category');
			}
			window.location = url;
		}

		// Toggle menu item availability
		function toggleMenuItemAvailability(id, status) {
			$.post('@Url.Action("ToggleMenuItemAvailability")', { id, status })
				.fail(() => {
					showAlert('Failed to update availability', 'danger');
				});
		}

		// Delete menu item
		function deleteMenuItem(id) {
			if (confirm('Are you sure you want to delete this menu item?')) {
				$.post('@Url.Action("DeleteMenuItem")', { id })
					.done(response => {
						if (response.success) {
							location.reload();
						} else {
							showAlert(response.message, 'danger');
						}
					})
					.fail(() => {
						showAlert('Failed to delete menu item', 'danger');
					});
			}
		}
	</script>
}